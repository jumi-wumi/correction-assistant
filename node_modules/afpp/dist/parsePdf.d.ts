export type ParsePdfCallback<T> = (content: Buffer | string, pageNumber: number, pageCount: number) => Promise<T> | T;
type ParseOptions = {
    /**
     * Password for encrypted pdf files.
     */
    password?: string;
    /**
     * Scale of a page if content is not text.
     */
    scale: number;
};
/**
 * Converts a PDF file from various input formats (Buffer, Uint8Array, string path, or URL). Pages are returned in mixed array of strings (text content) and buffers (image content) with in callback function.
 *
 * @async
 * @function pdf2string
 *
 * @param {Buffer|Uint8Array|string|URL} input - The PDF source, which can be a file path, URL, Buffer, or Uint8Array.
 * @param {Object} [options] - Optional parsing options for customizing the PDF parsing process.
 * @param {string} [options.password] - The password for encrypted PDF files, if required.
 * @param {function} callback - callback function to add another layer of processing, default callback returns content of page withouth any added processing.
 *
 * @since â€” v1.0.0
 *
 * @returns {Promise<string>} - A promise that resolves to the string representation of the PDF content.
 *
 * @throws {Error} Throws an error if the input type is invalid.
 */
export declare const parsePdf: <T>(input: Buffer | URL | Uint8Array | string, options: ParseOptions, callback: ParsePdfCallback<T>) => Promise<T[]>;
export {};
