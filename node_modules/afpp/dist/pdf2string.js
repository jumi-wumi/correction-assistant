"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pdf2string = void 0;
const promises_1 = require("node:fs/promises");
const parsePdfFileBuffer = async (options) => import('pdfjs-dist/legacy/build/pdf.mjs').then(async (pdfjsLib) => {
    const loadingTask = pdfjsLib.getDocument({
        ...options,
        verbosity: 0, // TODO enable for debug
    });
    const pdfDocument = await loadingTask.promise;
    const { numPages } = pdfDocument;
    const pageContents = new Array(numPages).fill('');
    const pagePromises = [];
    for (let pageNum = 1; pageNum <= numPages; pageNum += 1) {
        pagePromises.push(pdfDocument.getPage(pageNum).then(async (page) => {
            const textContent = await page.getTextContent({
                includeMarkedContent: false,
            });
            // ? Type assertion of items to TextItem[] should be safe because {includeMarkedContent: false}
            const items = textContent.items;
            if (items.length === 0) {
                pageContents[pageNum - 1] = '';
            }
            else {
                const pageText = items.map((item) => item.str || '').join(' ');
                pageContents[pageNum - 1] = pageText;
            }
        }));
    }
    await Promise.all(pagePromises);
    return pageContents;
});
/**
 * Converts a PDF file from various input formats (Buffer, Uint8Array, string path, or URL) to a string.
 *
 * @async
 * @function pdf2string
 *
 * @param {Buffer|Uint8Array|string|URL} input - The PDF source, which can be a file path, URL, Buffer, or Uint8Array.
 * @param {Object} [options] - Optional parsing options for customizing the PDF parsing process.
 * @param {string} [options.password] - The password for encrypted PDF files, if required.
 *
 * @since â€” v1.0.0
 *
 * @returns {Promise<string>} - A promise that resolves to the string representation of the PDF content.
 *
 * @throws {Error} Throws an error if the input type is invalid.
 */
const pdf2string = async (input, options) => {
    if (typeof input === 'string') {
        const fileBuffer = await (0, promises_1.readFile)(input, {});
        const data = new Uint8Array(fileBuffer);
        return parsePdfFileBuffer({ data, ...options });
    }
    if (Buffer.isBuffer(input)) {
        const data = new Uint8Array(input);
        return parsePdfFileBuffer({ data, ...options });
    }
    if (input instanceof Uint8Array) {
        return parsePdfFileBuffer({ data: input, ...options });
    }
    if (input instanceof URL) {
        return parsePdfFileBuffer({ url: input, ...options });
    }
    throw new Error(`Invalid source type: ${typeof input}`);
};
exports.pdf2string = pdf2string;
//# sourceMappingURL=pdf2string.js.map